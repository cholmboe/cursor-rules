---
description: Python best practices and patterns for modern software development
globs: **/*.py, src/**/*.py, tests/**/*.py
---

# Python Best Practices

## Project Structure

- Use src-layout with `src/your_package_name/`
- Place tests in `tests/` directory parallel to `src/`
- Keep configuration in `config/` or as environment variables
- Use dependency management file for project dependencies
- Use `data/` for data files
- Separate CLI scripts into `scripts/` or `bin/`

## Code Style

- Follow consistent code formatting
- Use consistent import sorting
- Follow PEP 8 naming conventions:
  - snake_case for functions and variables
  - PascalCase for classes
  - UPPER_CASE for constants
- Use reasonable line length limits
- Use absolute imports over relative imports

## Type Hints

- Use type hints for all function parameters and returns
- Import types from `typing` module
- Use `Optional[Type]` instead of `Type | None`
- Use `TypeVar` for generic types
- Define custom types in `types.py`
- Use `Protocol` for duck typing

## Application Structure

- Use dependency injection pattern
- Implement proper separation of concerns
- Follow SOLID principles
- Use appropriate data modeling
- Implement proper error handlers
- Structure code into logical modules

## Testing

- Write comprehensive unit tests
- Maintain good test coverage
- Create reusable test fixtures
- Use appropriate mocking strategies
- Test all error scenarios
- Include property-based testing where appropriate

## Security

- Use proper secrets management
- Sanitize all inputs
- Implement proper logging
- Follow security best practices
- Use proper encryption/hashing when needed
- Regular security updates

## Performance

- Use appropriate profiling techniques
- Implement caching where needed
- Use generators for large datasets
- Implement proper memory management
- Use appropriate concurrency patterns
- Monitor application performance

## Error Handling

- Create custom exception classes
- Use proper try-except blocks
- Implement proper logging
- Handle edge cases properly
- Use descriptive error messages
- Follow exception hierarchy best practices

## Documentation

- Use consistent docstring format
- Document all public APIs
- Keep README.md updated
- Use proper inline comments
- Generate API documentation
- Document environment setup
- Include usage examples

## Development Workflow

- Use virtual environments
- Use version control
- Follow semantic versioning
- Use continuous integration
- Implement proper logging
- Use static type checking
- Use code linting

## Dependencies

- Pin dependency versions
- Use appropriate dependency management
- Separate dev dependencies
- Use stable package versions
- Regularly update dependencies
- Check for security vulnerabilities
